

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import ca2.BankAccount;
import ca2.BankAccounts;
import ca2.ParseBankAccount;
import ca2.ParseBankAccounts;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static javax.swing.JOptionPane.showMessageDialog;

import org.apache.commons.io.IOUtils;
import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

/**
 *
 * @author A00240194
 */
public class BankCrud extends javax.swing.JFrame {

    /**
     * Creates new form BankCrud
     */
    Connection con;
    Statement st;
    ArrayList<BankAccount> bankAccounts = new ArrayList<>();
    
    public BankCrud() throws Exception {
        initComponents();
        fetch();
    }

    
    //fetch 
    private void fetch() throws Exception {
        bankAccounts.clear();
        DefaultTableModel modelA = (DefaultTableModel) tblData.getModel();
        modelA.setRowCount(0);
		CloseableHttpResponse response = null;
		try {
			URI uri = new URIBuilder()
					.setScheme("http")
					.setHost("localhost")
					.setPort(8080)
					.setPath("/DSCA_A00240194/ca2/bankaccounts/").build();
					//.setPath("/DistSysCA/ca2/bankaccounts/").build();
			
			System.out.println(uri.toString());
			
			HttpGet httpGet = new HttpGet(uri);
			httpGet.setHeader("Accept", "application/xml");
			
			CloseableHttpClient httpClient = HttpClients.createDefault();
			response = httpClient.execute(httpGet);
			
			HttpEntity entity = response.getEntity();
			String text = EntityUtils.toString(entity);
			System.out.println(text);
			
			List<BankAccount> BankAccountList = new ParseBankAccounts().doParseBankAccounts(text);
			int counter = 1;
			System.out.println("-------------------------");
			for(BankAccount bankAccount : BankAccountList) {
				System.out.println("\nAccount: "+counter);
				System.out.println("Branch Code: " + bankAccount.getBranch_code());
				System.out.println("Account Number: " + bankAccount.getAccount_number());
				System.out.println("Cust Name: " + bankAccount.getCust_name());
				System.out.println("Cust Address: " + bankAccount.getCust_address());
				System.out.println("Cust Rating: " + bankAccount.getCust_rating());
				System.out.println("Cust Balance: " + bankAccount.getBalance());
				bankAccounts.add(bankAccount);
				counter++;
			}
			DefaultTableModel model = (DefaultTableModel) tblData.getModel();
            for (BankAccount bankAccount : bankAccounts) {

                Object[] row = new Object[7];
                row[0] = bankAccount.getBranch_code();
                row[1] = bankAccount.getAccount_number();
                row[2] = bankAccount.getCust_name();
                row[3] = bankAccount.getCust_address();
                row[4] = bankAccount.getCust_rating();
                row[5] = bankAccount.getBalance();

                model.addRow(row);
            }
		} finally {
			response.close();
		}
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfBranch_code = new javax.swing.JTextField();
        tfAccount_no = new javax.swing.JTextField();
        tfCust_name = new javax.swing.JTextField();
        tfCust_address = new javax.swing.JTextField();
        tfCust_rating = new javax.swing.JTextField();
        tfBalance = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnGET = new javax.swing.JButton();
        tfGetAccount = new javax.swing.JTextField();
        btnDeleteALL = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Branch Code", "Account No", "Cust Name", "Cust Address", "Cust Rating", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblData);

        jLabel1.setText("Branch Code:");

        jLabel2.setText("Account No:");

        jLabel3.setText("Cust Name:");

        jLabel4.setText("Cust Address:");

        jLabel5.setText("Cust Rating:");

        jLabel6.setText("Balance:");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnAddActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnUpdateActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnDeleteActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnGET.setText("GET Account");
        btnGET.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnGETActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnDeleteALL.setText("Delete All");
        btnDeleteALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnDeleteALLActionPerformed(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfBranch_code, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(16, 16, 16)
                        .addComponent(tfAccount_no))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(19, 19, 19)
                        .addComponent(tfCust_name))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(7, 7, 7)
                        .addComponent(tfCust_address))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfBalance)
                            .addComponent(tfCust_rating)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGET, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteALL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                    .addComponent(tfGetAccount))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfBranch_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfAccount_no, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfCust_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfCust_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfCust_rating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnExport))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate)
                            .addComponent(btnDeleteALL)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnGET)
                    .addComponent(tfGetAccount))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>   
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) throws Exception {                                       
        // TODO add your handling code here:
    	if(tfBranch_code.getText().isEmpty()|| 
    			tfAccount_no.getText().isEmpty() || 
    			tfCust_name.getText().isEmpty() || 
    			tfCust_address.getText().isEmpty() || 
    			tfCust_rating.getText().isEmpty() || 
    			tfBalance.getText().isEmpty()) {
    		JOptionPane.showMessageDialog(null, "Please make sure all fields are filled in");
    		return;
    	}
    	
    	String BranchCode = tfBranch_code.getText().trim();
    	String AccountNo = tfAccount_no.getText().trim();
    	String CustName = tfCust_name.getText().trim();
    	String CustAddress = tfCust_address.getText().trim();
    	String CustRating = tfCust_rating.getText().trim();
    	String Balance = tfBalance.getText().trim();
    	
    	String inputXML = "<bankaccount> <branch_code>"+BranchCode+"</branch_code> <account_number>"+AccountNo+"</account_number>"
    			+ " <cust_name>"+CustName+"</cust_name> <cust_address>"+CustAddress+"</cust_address>"
    					+ " <cust_rating>"+CustRating+"</cust_rating> <balance>"+Balance+"</balance> </bankaccount>";
    	  InputStream in;
    	  StringEntity entity = new StringEntity(inputXML, ContentType.create(
    	    "application/xml", Consts.UTF_8));
    	  entity.setChunked(true);
    	  HttpPost httppost = new HttpPost(
    	    "http://localhost:8080/DSCA_A00240194/ca2/bankaccounts/");
    	  httppost.setEntity(entity);
    	  HttpClient client = HttpClients.createDefault();
    	//CloseableHttpResponse response = null;
		try {
			   HttpResponse response = client.execute(httppost);
			   System.out.println(response.toString());
			   in=response.getEntity().getContent();
			   String body = IOUtils.toString(in);
			   System.out.println(body);
		} finally {
			//response.close();
			fetch();
		}
    }                                      

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
    	if(tfBranch_code.getText().isEmpty()|| 
    			tfAccount_no.getText().isEmpty() || 
    			tfCust_name.getText().isEmpty() || 
    			tfCust_address.getText().isEmpty() || 
    			tfCust_rating.getText().isEmpty() || 
    			tfBalance.getText().isEmpty()) {
    		JOptionPane.showMessageDialog(null, "Please make sure all fields are filled in");
    		return;
    	}
    	
        // TODO add your handling code here:
    	String BranchCode = tfBranch_code.getText().trim();
    	String AccountNo = tfAccount_no.getText().trim();
    	String CustName = tfCust_name.getText().trim();
    	String CustAddress = tfCust_address.getText().trim();
    	String CustRating = tfCust_rating.getText().trim();
    	String Balance = tfBalance.getText().trim();
    	
    	String inputXML = "<bankaccount> <branch_code>"+BranchCode+"</branch_code> <account_number>"+AccountNo+"</account_number>"
    			+ " <cust_name>"+CustName+"</cust_name> <cust_address>"+CustAddress+"</cust_address>"
    					+ " <cust_rating>"+CustRating+"</cust_rating> <balance>"+Balance+"</balance> </bankaccount>";
    	  InputStream in;
    	  StringEntity entity = new StringEntity(inputXML, ContentType.create(
    	    "application/xml", Consts.UTF_8));
    	  entity.setChunked(true);
    	  HttpPut httpput = new HttpPut(
    	    "http://localhost:8080/DSCA_A00240194/ca2/bankaccounts/"+BranchCode+"/"+AccountNo);
    	  httpput.setEntity(entity);
    	  HttpClient client = HttpClients.createDefault();
    	  
  		try {
			   HttpResponse response = client.execute(httpput);
			   System.out.println(response.toString());
			   in=response.getEntity().getContent();
			   String body = IOUtils.toString(in);
			   System.out.println(body);
		} finally {
			//response.close();
			fetch();
		}
    }                                         

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) throws Exception {                                          
        // TODO add your handling code here:
    	if(tfBranch_code.getText().isEmpty()|| 
    			tfAccount_no.getText().isEmpty()) {
    		JOptionPane.showMessageDialog(null, "Please make sure all fields are filled in");
    		return;
    	}
    	
    	String BranchCode = tfBranch_code.getText().trim();
    	String AccountNo = tfAccount_no.getText().trim();
    	
		CloseableHttpResponse response = null;
		try {
			URI uri = new URIBuilder()
					.setScheme("http")
					.setHost("localhost")
					.setPort(8080)
					.setPath("/DSCA_A00240194/ca2/bankaccounts/"+BranchCode+"/"+AccountNo).build();
			
			System.out.println(uri.toString());
			CloseableHttpClient httpClient = HttpClients.createDefault();
			
			HttpDelete httpDelete = new HttpDelete(uri);			
			response = httpClient.execute(httpDelete);
		} finally {
	        response.close();
		    fetch();
		}
    }                               
    
    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    	PrintToCSV(tblData, "/export/");
    }                                         

    private void btnDeleteALLActionPerformed(java.awt.event.ActionEvent evt) throws Exception {                                             
        // TODO add your handling code here:
    	CloseableHttpResponse response = null;
		try {
			URI uri = new URIBuilder()
					.setScheme("http")
					.setHost("localhost")
					.setPort(8080)
					.setPath("/DSCA_A00240194/ca2/bankaccounts/").build();
			
			System.out.println(uri.toString());
			CloseableHttpClient httpClient = HttpClients.createDefault();
			
			HttpDelete httpDelete = new HttpDelete(uri);			
			response = httpClient.execute(httpDelete);
		} finally {
	        response.close();
		    fetch();
		}
    }                                            

    private void btnGETActionPerformed(java.awt.event.ActionEvent evt) throws Exception {                                       
        // TODO add your handling code here:
    	if(tfBranch_code.getText().isEmpty()|| 
    			tfAccount_no.getText().isEmpty()) {
    		JOptionPane.showMessageDialog(null, "Please make sure all fields are filled in");
    		return;
    	}
    	
    	String BranchCode = tfBranch_code.getText().trim();
    	String AccountNo = tfAccount_no.getText().trim();
    	
    	CloseableHttpResponse response = null;
		try {
			URI uri = new URIBuilder()
					.setScheme("http")
					.setHost("localhost")
					.setPort(8080)
					.setPath("/DSCA_A00240194/ca2/bankaccounts/"+BranchCode+"/"+AccountNo).build();
					//.setPath("/DistSysCA/ca2/bankaccounts/").build();
			
			System.out.println(uri.toString());
			
			HttpGet httpGet = new HttpGet(uri);
			httpGet.setHeader("Accept", "application/xml");
			
			CloseableHttpClient httpClient = HttpClients.createDefault();
			response = httpClient.execute(httpGet);
			
			HttpEntity entity = response.getEntity();
			String text = EntityUtils.toString(entity);
			System.out.println(text);
			
			BankAccount bankAccount = new ParseBankAccount().doParseBankAccount(text);
			System.out.println("-------------------------");
			System.out.println("Branch Code: " + bankAccount.getBranch_code());
			System.out.println("Account Number: " + bankAccount.getAccount_number());
			System.out.println("Cust Name: " + bankAccount.getCust_name());
			System.out.println("Cust Address: " + bankAccount.getCust_address());
			System.out.println("Cust Rating: " + bankAccount.getCust_rating());
			System.out.println("Cust Balance: " + bankAccount.getBalance());
			
			tfGetAccount.setText(bankAccount.getBranch_code() + ", " + bankAccount.getAccount_number() + ", " + bankAccount.getCust_name() + ", " + bankAccount.getCust_address() + ", " + bankAccount.getCust_rating() + ", " + bankAccount.getBalance());
		}finally {
			response.close();
		}
	}  

    /**
     * @param args the command line arguments
     */
        public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BankCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BankCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BankCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BankCrud.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new BankCrud().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(BankCrud.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

     // Variables declaration - do not modify                     
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteALL;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnGET;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField tfAccount_no;
    private javax.swing.JTextField tfBalance;
    private javax.swing.JTextField tfBranch_code;
    private javax.swing.JTextField tfCust_address;
    private javax.swing.JTextField tfCust_name;
    private javax.swing.JTextField tfCust_rating;
    private javax.swing.JTextField tfGetAccount;
    // End of variables declaration                 
    
    public static boolean PrintToCSV(javax.swing.JTable jTable1, String pathToExportTo){
        try {

            TableModel model = jTable1.getModel();
            FileWriter csv = new FileWriter(new File("src/export/Ross.csv"));

            for (int i = 0; i < model.getColumnCount(); i++) {
                csv.write(model.getColumnName(i) + ",");
            }

            csv.write("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    csv.write(model.getValueAt(i, j).toString() + ",");
                }
                csv.write("\n");
            }

            csv.close();
            System.out.println("Successfully Created Ross.csv!!!");
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
    return false;
    }
   
}
